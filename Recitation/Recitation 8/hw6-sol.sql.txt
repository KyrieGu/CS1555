----CS1555/2055 - DATABASE MANAGEMENT SYSTEMS (FALL 2019)
----DEPT. OF COMPUTER SCIENCE, UNIVERSITY OF PITTSBURGH
----ASSIGNMENT #6: SQL/PL: FUNCTIONS, PROCEDURES, AND TRIGGERS - SAMPLE SOLUTION

----------------------------------------------------------
--Question 1 Procedure & Function
----------------------------------------------------------
--Q1a)

CREATE OR REPLACE PROCEDURE proc_Update_Last_Read(input_sensor_id in int, read_time in timestamp)
AS
$$
BEGIN
    update Sensor
    set Last_Read = read_time
    where Sensor.sensor_id = input_sensor_id;
END;
$$ language plpgsql;


------------------------------
--Q1b)

CREATE OR REPLACE FUNCTION fun_compute_percentage(input_forest_no in varchar, area_covered in float) RETURNS float
AS
$$
declare
    percentage float;
BEGIN
    select least(area_covered / f.area, 1)
    into percentage
    from forest f
    where f.forest_no = input_forest_no;
    return
        (percentage);
END;
$$ language plpgsql;
--Again, note that the variable declaration has to come before the body of the function/procedure

------------------------------------------------------------------
--Question 2 Triggers
------------------------------------------------------------------
--Q2a)
create or replace function func_2a() returns trigger as
$$
begin
    call proc_Update_Last_Read(new.sensor_id, new.report_time);
    return new;
end;
$$ language plpgsql;

drop trigger if exists tri_Last_Read on Report;
CREATE TRIGGER tri_Last_Read
    AFTER
        INSERT
    ON Report
    FOR EACH ROW
execute procedure func_2a();

------------------------------
--Q2b)

create or replace function func_2b() returns trigger as
$$
begin
    new.percentage := fun_compute_percentage(new.forest_no, new.area);
    return new;
end;
$$ language plpgsql;

drop trigger if exists tri_Percentage on coverage;
CREATE TRIGGER tri_Percentage
    BEFORE
        UPDATE OF area
    ON coverage
    FOR EACH ROW
execute procedure func_2b();

------------------------------
--Q2c)

create or replace function func_2c() returns trigger as
$$
begin
    insert into Emergency values (new.Sensor_ID, new.Report_Time);
    return new;
end;
$$ language plpgsql;

drop trigger if exists tri_Emergency on REPORT;
CREATE TRIGGER tri_Emergency
    AFTER
        INSERT
    ON REPORT
    FOR EACH ROW
    WHEN (new.Temperature > 100)
execute procedure func_2c();

------------------------------------------------------------------
--Question 3 Verify Triggers
------------------------------------------------------------------
--Q3a)

select *
from SENSOR;

insert into REPORT
VALUES (1, 55, to_timestamp('10-JUN-2019 09:00:00', 'DD-MON-YYYY HH24:MI:SS'));

select *
from SENSOR;

--Q3b)

select *
from COVERAGE;

update COVERAGE
set area=20000
where FOREST_NO = '1'
  and STATE = 'PA';

update COVERAGE
set area=50000
where FOREST_NO = '1'
  and STATE = 'OH';

select *
from COVERAGE;

--Q3c)

select *
from EMERGENCY;

insert into REPORT
VALUES (1, 105, to_timestamp('10-JUL-2019 09:00:00', 'DD-MON-YYYY HH24:MI:SS'));

select *
from EMERGENCY;

commit;

------------------------------------------------------------------
--Question 4 Cursors
------------------------------------------------------------------

-- Explicit cursor
CREATE OR REPLACE PROCEDURE forest_names() AS
$$
DECLARE
    forest_cursor CURSOR
        FOR SELECT *
            FROM forest;
    forest_record forest%rowtype;
BEGIN
--     OPEN forest_cursor;
    for forest_record in forest_cursor
    LOOP
--         FETCH forest_cursor INTO forest_record;
--         EXIT WHEN NOT FOUND;
        raise notice '%', forest_record.name;
    END LOOP;
    CLOSE forest_cursor;
END
$$ LANGUAGE 'plpgsql';

DO
$$
    begin
        call forest_names();
    end;
$$ language 'plpgsql';

-- Implicit cursor version 1
CREATE OR REPLACE PROCEDURE forest_names() AS
$$
DECLARE
    forest_record forest%rowtype;
    forest_name varchar;
BEGIN
    for forest_name in
        SELECT name
        FROM forest
        group by name
    LOOP
        raise notice '%', forest_name;
    END LOOP;
END
$$ LANGUAGE 'plpgsql';

DO
$$
    begin
        call forest_names();
    end;
$$ language 'plpgsql';
