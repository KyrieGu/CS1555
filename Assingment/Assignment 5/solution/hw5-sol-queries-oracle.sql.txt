----CS1555/2055 - DATABASE MANAGEMENT SYSTEMS (FALL 2019)
----DEPT. OF COMPUTER SCIENCE, UNIVERSITY OF PITTSBURGH
----ASSIGNMENT #5: SQL TRANSACTIONS AND SQL VIEWS - SAMPLE SOLUTION

-------------------------------------------------
--Question 3
-------------------------------------------------
--Q3.a: Find the top 3 sensors that have issued the highest amount of reports.

select Sensor_Id
from report
group by Sensor_Id
order by count(*) desc
    fetch next 3 rows only;

--Q3.b: Find the next 2 sensors after the top 3 sensors that have issued the highest amount of reports.

select Sensor_Id
from report
group by Sensor_Id
order by count(*) desc
    offset 3 rows
    fetch next 2 rows only;

-------------------------------------------------
--Question 4
------------------------------------------------

--Q4.a: A view named DUTIES that counts, for each worker, the total number of sensors that are maintained by him/her.

CREATE OR REPLACE VIEW DUTIES AS
SELECT Maintainer, COUNT(*) as Total
FROM SENSOR
GROUP BY Maintainer;

--Q4.b: A materialized view named DUTIES_MV that corresponds to the DUTIES view.

BEGIN
  EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW DUTIES_MV';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -12003 THEN
      RAISE;
    END IF;
END;
CREATE MATERIALIZED VIEW DUTIES_MV
AS
select *
from DUTIES;

--Q4.c: A view named FOREST_SENSOR that lists all forests along with its sensors (Forest_no, Name, Sensor_Id).

CREATE OR REPLACE VIEW FOREST_SENSOR AS
SELECT forest_no, Name, Sensor_Id
FROM FOREST
         JOIN SENSOR
              ON (X between MBR_XMin and MBR_XMax) and (Y between MBR_YMin and MBR_YMax);


-------------------------------------------------
--Question 5
------------------------------------------------

--Q5.a: Find the names of the workers who maintain the maximum number of sensors.

SELECT Maintainer, total
FROM DUTIES
WHERE total = (
    SELECT total
    from DUTIES
    order by total desc
        fetch next 1 rows only
);

--Q5.b: Find the names of all forests such that no sensors in those forests reported anything
--between 10-AUG-2019 00:00:00 and 11-AUG-2019 00:00:00.

SELECT distinct Name
FROM FOREST_SENSOR
WHERE NOT EXISTS(SELECT Sensor_ID
                 FROM FOREST_SENSOR
                          natural join REPORT
                 WHERE (Report_Time between to_timestamp('10-AUG-2019 00:00:00', 'DD-MON-YYYY HH24:MI:SS')
                     and to_timestamp('11-AUG-2019 00:00:00', 'DD-MON-YYYY HH24:MI:SS')));


--Q5.c: If you have used DUTIES (or DUTIES_MV) in any of the above queries, then write a second query SQL using DUTIES_MV (or DUTIES).

SELECT Maintainer, total
FROM DUTIES_MV
WHERE total = (
    SELECT total
    from DUTIES_MV
    order by total desc
        fetch next 1 rows only
);

--Q5.d: Compare and report the differences between views and materialized views in term of execution time.
